// Generated by CoffeeScript 1.9.3
(function() {
  var hasInputBox, matchFilter, matchNumber, matchText, setupFilters, setupTable, updateFilters, updateTable, zip;

  hasInputBox = function(elem) {
    return $(elem).children('input').length > 0;
  };

  zip = function(a, b) {
    var i, results;
    i = 0;
    results = [];
    while (i < a.length) {
      results.push([a[i], b[i]]);
      i++;
    }
    return results;
  };

  setupFilters = function() {
    return $('table[filterable-table]').each(function(i, table) {
      return setupTable(table);
    });
  };

  setupTable = function(t) {
    $(t).find('thead').append('<tr filterable-column-inputs></tr>');
    $(t).find('thead tr[filterable-header-row] th').each(function(i, elem) {
      if ($(elem).is('[filterable-column]')) {
        return $(t).find('thead tr[filterable-column-inputs]').append('<th><input filterable-logic=\'' + $(elem).attr('filterable-logic') + '\'></input></th>');
      } else {
        return $(t).find('thead tr[filterable-column-inputs]').append('<th></th>');
      }
    });
    return $('table[filterable-table] thead tr th input').change(function() {
      return updateFilters();
    });
  };

  updateFilters = function() {
    return $('table[filterable-table]').each(function(i, table) {
      return updateTable(table);
    });
  };

  updateTable = function(table) {
    var cellsWithPatterns, patterns;
    cellsWithPatterns = $(table).find('thead tr[filterable-column-inputs] th');
    patterns = cellsWithPatterns.map(function(idx, cell) {
      if (hasInputBox(cell)) {
        return {
          pattern: $(cell).children('input').val(),
          logic: $(cell).children('input').attr('filterable-logic')
        };
      } else {
        return {
          pattern: null,
          logic: null
        };
      }
    });
    patterns = patterns.toArray();
    $(table).find('tbody tr').show();
    return $(table).find('tbody tr').each(function(j, row) {
      var filterMatches, i, results1, values;
      values = $(row).find('td').map(function(i, x) {
        return $(x).text();
      });
      filterMatches = zip(patterns, values).map(function(x) {
        return matchFilter(x[0], x[1]);
      });
      i = 0;
      results1 = [];
      while (i < filterMatches.length) {
        if (!filterMatches[i]) {
          $(row).hide();
        }
        results1.push(i++);
      }
      return results1;
    });
  };

  matchText = function(pattern, value) {
    return value.toLowerCase().includes(pattern.toLowerCase());
  };

  matchNumber = function(pattern, value) {
    value = value.replace(",", "");
    if (/^\d/.test(pattern)) {
      return value.includes(pattern);
    }
    return eval(value + pattern);
  };

  matchFilter = function(filter, value) {
    var logic, pattern;
    pattern = filter['pattern'];
    logic = filter['logic'];
    if ((logic === null) || (pattern.length === 0)) {
      return true;
    }
    if (logic === 'text') {
      return matchText(pattern, value);
    } else if (logic === 'numeric') {
      return matchNumber(pattern, value);
    }
    return true;
  };

  $(document).ready(setupFilters);

}).call(this);
